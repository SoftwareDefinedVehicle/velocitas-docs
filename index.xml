<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Velocitas</title>
    <link>/velocitas/</link>
    <description>Recent content on Velocitas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="/velocitas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>digital.auto</title>
      <link>/velocitas/docs/tutorials/prototyping/digital_auto/</link>
      <pubDate>Wed, 02 Nov 2022 10:09:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/prototyping/digital_auto/</guid>
      <description>The open and web based digital.auto offers a rapid prototyping environment to explore and validate ideas of a Vehicle App. digital.auto interacts with different vehicle sensors and actuators via standardized APIs specified by the COVESA Vehicle Signal Specification (VSS) without custom setup requirements. Within the platform you can:&#xA;browse, navigate and enhance vehicle signals (sensors, actuators and branches) in the Vehicle API Catalogue mapped to a 3D model of the vehicle.</description>
    </item>
    <item>
      <title>Local Runtime</title>
      <link>/velocitas/docs/tutorials/vehicle_app_runtime/local_runtime/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_app_runtime/local_runtime/</guid>
      <description>Using tasks in Visual Studio Code Overview: If you are developing in Visual Studio Code, the runtime components (like KUKSA Databroker or Vehicle Services) are available for local execution coming from our devenv-runtimes package and are accessible as Tasks, a feature of the Visual Studio Code. Additional information on tasks can be found here .&#xA;Start local runtime: To start local runtime, a task called Local Runtime - Up is available.</description>
    </item>
    <item>
      <title>Python Vehicle App Development</title>
      <link>/velocitas/docs/tutorials/vehicle_app_development/python_development/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_app_development/python_development/</guid>
      <description>We recommend that you make yourself familiar with the Vehicle App SDK first, before going through this tutorial.&#xA;The following information describes how to develop and test the sample Vehicle App that is included in the Python template repository . You will learn how to use the Vehicle App Python SDK and how to interact with the Vehicle Model.&#xA;Once you have completed all steps, you will have a solid understanding of the development workflow and you will be able to reuse the template repository for your own Vehicle App development project.</description>
    </item>
    <item>
      <title>Quickstart</title>
      <link>/velocitas/docs/tutorials/quickstart/quickstart/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/quickstart/quickstart/</guid>
      <description>This page describes&#xA;how to create a GitHub repository for your Vehicle App development, how to set up and configure the DevContainer-based development environment , and how to build, customize and test the sample Vehicle App included in your freshly created Vehicle App repository. You will learn how to use the Vehicle App SDK, interact with the Vehicle API and work with CI/CD using the pre-configured GitHub Workflows that come with the template repository.</description>
    </item>
    <item>
      <title>Usage</title>
      <link>/velocitas/docs/concepts/lifecycle_management/packages/usage/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/concepts/lifecycle_management/packages/usage/</guid>
      <description>Overview After you have set up the .velocitas.json for your project configuration , using packages is pretty straight forward.&#xA;Currently, the packages provided by the Velocitas team are the following: name description devenv-runtimes Containing scripts and configuration for Local and Kanto Runtime Services devenv-devcontainer-setup Basic configuration for the devcontainer, like proxy configuration, post create scripts, entry points for the lifecycle management. devenv-github-workflows Containing github workflow files used by velocitas repositories devenv-github-templates Containing github templates used by velocitas repositories devenv-runtime-local Central configuration for local runtime execution (deprecated) devenv-runtime-k3d Central configuration for k3d runtime execution (deprecated) To see how these provided packages are used inside a .</description>
    </item>
    <item>
      <title>Import examples</title>
      <link>/velocitas/docs/tutorials/quickstart/import_examples/</link>
      <pubDate>Tue, 30 Aug 2022 14:56:21 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/quickstart/import_examples/</guid>
      <description>This guide will help you to import examples provided by the SDK package into your template repository.&#xA;A Visual Studio Code task called Import example app from SDK is available in the /.vscode/tasks.json which can replace your /app directory in your template repository with some example Vehicle Apps from the SDK package.&#xA;To avoid overwriting existing changes in your /app directory, commit or stash changes before importing the example app. Press F1 Select command Tasks: Run Task Select Import example app from SDK Choose Continue without scanning the output Select seat-adjuster Run the Vehicle App from SDK example The launch settings are already prepared for the VehicleApp in the template repository /.</description>
    </item>
    <item>
      <title>Install a working container runtime</title>
      <link>/velocitas/docs/tutorials/quickstart/container_runtime/</link>
      <pubDate>Fri, 19 Aug 2022 17:46:21 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/quickstart/container_runtime/</guid>
      <description>In the past the recommended runtime would for sure be Docker Desktop . But since Docker Inc. changed their license model it is fair enough for an open source project to look for free alternatives.&#xA;Linux The obvious (and our recommended) &amp;ldquo;alternative&amp;rdquo; to Docker Desktop on Linux is to just use the Docker Engine (without Docker Desktop), a pure CLI-based solution available for most popular Linux distributions licensed under the Apache License, version 2.</description>
    </item>
    <item>
      <title>Working behind proxy</title>
      <link>/velocitas/docs/tutorials/quickstart/behind_proxy/</link>
      <pubDate>Fri, 19 Aug 2022 17:46:21 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/quickstart/behind_proxy/</guid>
      <description>We know what a pain and how time consuming it can be to setup your environment behind a cooperate proxy. This guide will help you to set it up correctly.&#xA;Be aware that correct proxy configuration depends on the setup of your organization and of course of your personal development environment (hardware, OS, virtualization setup, &amp;hellip;). So, we most probably do not cover all issues out there in the developers world.</description>
    </item>
    <item>
      <title>C&#43;&#43; Vehicle App Development</title>
      <link>/velocitas/docs/tutorials/vehicle_app_development/cpp_development/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_app_development/cpp_development/</guid>
      <description>We recommend that you make yourself familiar with the Vehicle App SDK first, before going through this tutorial.&#xA;The following information describes how to develop and test the sample Vehicle App that is included in the C++ template repository . You will learn how to use the Vehicle App C++ SDK and how to interact with the Vehicle Model.&#xA;Once you have completed all steps, you will have a solid understanding of the development workflow and you will be able to reuse the template repository for your own Vehicle App development project.</description>
    </item>
    <item>
      <title>Development</title>
      <link>/velocitas/docs/concepts/lifecycle_management/packages/development/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/concepts/lifecycle_management/packages/development/</guid>
      <description>Getting started First thing you need to do is to create a repository at e.g., https://github.com/my-organisation/my-velocitas-package. The URL needs to be referenced in the .velocitas.json of your Vehicle App repository.&#xA;General configuration of Packages Every Package repository needs a manifest.json at their root. The manifest.json is the package configuration and holds package relevant information and its behaviour.&#xA;Here are examples of this configuration:&#xA;devenv-runtimes manifest devenv-devcontainer-setup manifest The manifest of a package describes a list of components.</description>
    </item>
    <item>
      <title>Service Integration</title>
      <link>/velocitas/docs/tutorials/prototyping/service_integration/</link>
      <pubDate>Wed, 02 Nov 2022 10:09:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/prototyping/service_integration/</guid>
      <description>Services can make sure, that when you write a VSS data point, something is actually happening. Eclipse Velocitas has an example seat or hvac service. If your Vehicle App makes use of e.g. Vehicle.Cabin.Seat.Row1.Pos1.Position or other seat/hvac specific data points you are in for some real action. To learn more, visit Vehicle Services .&#xA;Our maintained devenv-runtimes package ( Velocitas Lifecycle Management ) comes with the support of adding further Vehicle Services to the runtime.</description>
    </item>
    <item>
      <title>Vehicle Signal Interface</title>
      <link>/velocitas/docs/concepts/development_model/vehicle_app_manifest/interfaces/vehicle_signal_interface/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0100</pubDate>
      <guid>/velocitas/docs/concepts/development_model/vehicle_app_manifest/interfaces/vehicle_signal_interface/</guid>
      <description>Providing CLI package Interface type-key devenv-devcontainer-setup vehicle-signal-interface The Vehicle Signal Interface formerly known as Vehicle Model interface type creates an interface to a signal interface described by the VSS spec. This interface will generate a source code package equivalent to the contents of your VSS JSON automatically upon devContainer creation.&#xA;If a Vehicle App requires a vehicle-signal-interface, it will act as a consumer of datapoints already available in the system.</description>
    </item>
    <item>
      <title>Project Configuration</title>
      <link>/velocitas/docs/concepts/lifecycle_management/project_configuration/</link>
      <pubDate>Mon, 13 Feb 2023 09:43:25 +0530</pubDate>
      <guid>/velocitas/docs/concepts/lifecycle_management/project_configuration/</guid>
      <description>Every Vehicle App repo comes with a .velocitas.json which is the project configuration of your app. It holds references to the packages and their respective versions as well as components you are using in your project.&#xA;Here is an example of this configuration:&#xA;{ &amp;#34;packages&amp;#34;: { &amp;#34;devenv-runtimes&amp;#34;: &amp;#34;v3.1.0&amp;#34;, &amp;#34;devenv-devcontainer-setup&amp;#34;: &amp;#34;v2.1.0&amp;#34; }, &amp;#34;components&amp;#34;: [ &amp;#34;runtime-local&amp;#34;, &amp;#34;devcontainer-setup&amp;#34;, &amp;#34;vehicle-signal-interface&amp;#34;, &amp;#34;sdk-installer&amp;#34;, &amp;#34;grpc-interface-support&amp;#34; ], &amp;#34;variables&amp;#34;: { &amp;#34;language&amp;#34;: &amp;#34;python&amp;#34;, &amp;#34;repoType&amp;#34;: &amp;#34;app&amp;#34;, &amp;#34;appManifestPath&amp;#34;: &amp;#34;app/AppManifest.json&amp;#34;, &amp;#34;githubRepoId&amp;#34;: &amp;#34;eclipse-velocitas/vehicle-app-python-template&amp;#34;, &amp;#34;generatedModelPath&amp;#34;: &amp;#34;.</description>
    </item>
    <item>
      <title>GRPC Interface Style Guide</title>
      <link>/velocitas/docs/concepts/development_model/val/grpc_style_guide/</link>
      <pubDate>Mon, 09 May 2022 14:24:56 +0530</pubDate>
      <guid>/velocitas/docs/concepts/development_model/val/grpc_style_guide/</guid>
      <description>This provides a style guide for .proto files. By following these conventions, you&amp;rsquo;ll make your protocol buffer message definitions and their corresponding classes consistent and easy to read. Unless otherwise indicated, this style guide is based on the style guide from google protocol-buffers style under Apache 2.0 License &amp;amp; Creative Commons Attribution 4.0 License.&#xA;Note that protocol buffer style can evolve over time, so it is likely that you will see .</description>
    </item>
    <item>
      <title>C&#43;&#43; Manual Vehicle Model Creation</title>
      <link>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/manual_creation_cpp/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/manual_creation_cpp/</guid>
      <description>Not yet done for C++</description>
    </item>
    <item>
      <title>Create a server</title>
      <link>/velocitas/docs/tutorials/grpc_service_generation/create_server/</link>
      <pubDate>Fri, 07 Jun 2024 14:02:00 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/grpc_service_generation/create_server/</guid>
      <description>Introduction This example assumes that you have used the Velocitas App C++ Template to create a new repository and now want to modify it to be a grpc service server. The example files can also be found in the Vehicle App C++ SDK Github repository .&#xA;Velocitas components Dependning on how you intend to deploy the Application and Databroker the number of Velocitas components required varies. Below is the minimum set needed in .</description>
    </item>
    <item>
      <title>gRPC Service Interface</title>
      <link>/velocitas/docs/concepts/development_model/vehicle_app_manifest/interfaces/grpc_interface/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0100</pubDate>
      <guid>/velocitas/docs/concepts/development_model/vehicle_app_manifest/interfaces/grpc_interface/</guid>
      <description>Providing CLI package Interface type-key devenv-devcontainer-setup grpc-interface Description This interface type introduces a dependency to a gRPC service. It is used to generate either client stubs (in case your application requires the interface) or server stubs (in case your application provides the interface). The result of the generation is a language specific and package manager specific source code package, integrated with the Velocitas SDK core.&#xA;If a Vehicle App requires a grpc-interface - a client stub embedded into the Velocitas framework will be generated and added as a build-time dependency of your application.</description>
    </item>
    <item>
      <title>Publish Subscribe</title>
      <link>/velocitas/docs/concepts/development_model/vehicle_app_manifest/interfaces/pubsub/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0100</pubDate>
      <guid>/velocitas/docs/concepts/development_model/vehicle_app_manifest/interfaces/pubsub/</guid>
      <description>Providing CLI package Interface type-key devenv-runtimes pubsub Description This interface type introduces a dependency to a publish and subscribe middleware. While this may change in the future due to new middlewares being adopted, at the moment this will always indicate a dependency to MQTT.&#xA;If a Vehicle App requires pubsub - this will influence the generated deployment specs to include a publish and subscribe broker (i.e. an MQTT broker).</description>
    </item>
    <item>
      <title>Create</title>
      <link>/velocitas/docs/concepts/lifecycle_management/phases/create/</link>
      <pubDate>Mon, 07 Aug 2023 00:00:00 +0100</pubDate>
      <guid>/velocitas/docs/concepts/lifecycle_management/phases/create/</guid>
      <description>To be filled.&#xA;Template based creation flow Bootstrapping creation flow Resulting Velocitas CLI and Velocitas Package changes velocitas create command shall be introduced&#xA;it will guide through the project creation process, allowing the developer to add APIs and services at creation time which will reference the correct Velocitas CLI packages (either provided by Velocitas or by a 3rd party). in addition to an interactive mode where create is invoked without arguments, there shall be a CLI mode where all of the arguments shall be passable as arguments Packages need to be available in a central registry (i.</description>
    </item>
    <item>
      <title>Velocitas CLI</title>
      <link>/velocitas/docs/concepts/lifecycle_management/velocitas_cli/</link>
      <pubDate>Mon, 13 Feb 2023 09:43:25 +0530</pubDate>
      <guid>/velocitas/docs/concepts/lifecycle_management/velocitas_cli/</guid>
      <description>Background Our Velocitas CLI is introduced to support the process of the lifecycle of a Vehicle App as a project manager.&#xA;Commands You can find all information about available commands here .&#xA;CLI Flow examples velocitas create Create a new Velocitas Vehicle App project. Note velocitas create needs to be executed inside our generic vehicle-app-template (inside the devcontainer) where a so called&#xA;package-index.json is located for now, which is a central place of defining our extension and core packages with their respective exposed interfaces.</description>
    </item>
    <item>
      <title>C&#43;&#43; Vehicle Model Distribution</title>
      <link>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/vehicle_model_distribution/distribution_cpp/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/vehicle_model_distribution/distribution_cpp/</guid>
      <description>Now that you have created your own Vehicle Model, we can distribute it to make use of it in Vehicle Apps.&#xA;Copying the folder to your Vehicle App repo The easiest way to get started quickly is to copy the created model, presumably stored in vehicle_model into your Vehicle App repository to use it. To do so, simply copy and paste the directory into the &amp;lt;sdk_root&amp;gt;/app directory and replace the existing model.</description>
    </item>
    <item>
      <title>Python Vehicle Model Distribution</title>
      <link>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/vehicle_model_distribution/distribution_python/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/vehicle_model_distribution/distribution_python/</guid>
      <description>Now you a have a Python package containing your first Python Vehicle Model and it is time to distribute it. There is nothing special about the distribution of this package, since it is just an ordinary Python package. Check out the Python Packaging User Guide to learn more about packaging and package distribution in Python.&#xA;Distribute to single Vehicle App If you want to distribute your Python Vehicle Model to a single Vehicle App, you can do so by copying the entire folder my_vehicle_model under the /app/src folder of your Vehicle App repository and treat it as a sub-package of the Vehicle App.</description>
    </item>
    <item>
      <title>Create a client</title>
      <link>/velocitas/docs/tutorials/grpc_service_generation/create_client/</link>
      <pubDate>Fri, 07 Jun 2024 14:02:00 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/grpc_service_generation/create_client/</guid>
      <description>Introduction This example assumes that you have used the Velocitas App C++ Template to create a new repository and now want to modify it to be a grpc service client. The example files can also be found in the Vehicle App C++ SDK Github repository .&#xA;Velocitas components Depending on how you intend to deploy the Application and Databroker the number of Velocitas components required varies. Below is the minimum set needed in .</description>
    </item>
    <item>
      <title>Vehicle App Integration Testing</title>
      <link>/velocitas/docs/tutorials/vehicle_app_development/integration_tests/</link>
      <pubDate>Mon, 09 May 2022 13:46:21 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_app_development/integration_tests/</guid>
      <description>To be sure that a newly created Vehicle App will run together with the KUKSA Databroker and potentially other dependant Vehicle Services or Vehicle Apps, it&amp;rsquo;s essential to write integration tests along with developing the app.&#xA;To execute an integration test, the dependant components need to be running and be accessible from the test runner. This guide will describe how integration tests can be written and integrated in the CI pipeline so that they are executed automatically when building the application.</description>
    </item>
    <item>
      <title>Python Manual Vehicle Model Creation</title>
      <link>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/manual_creation_python/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_model_creation/manual_model_creation/manual_creation_python/</guid>
      <description>Setup a Python Package manually A Vehicle Model should be defined in its own Python Package. This allows to distribute the Vehicle Model later as a standalone package and to use it in different Vehicle App projects.&#xA;The name of the Vehicle Model package will be my_vehicle_model for this walkthrough.&#xA;Start Visual Studio Code&#xA;Select File &amp;gt; Open Folder (File &amp;gt; Open&amp;hellip; on macOS) from the main menu.&#xA;In the Open Folder dialog, create a my_vehicle_model folder and select it.</description>
    </item>
    <item>
      <title>Troubleshooting</title>
      <link>/velocitas/docs/concepts/lifecycle_management/troubleshooting/</link>
      <pubDate>Mon, 13 Feb 2023 09:43:25 +0530</pubDate>
      <guid>/velocitas/docs/concepts/lifecycle_management/troubleshooting/</guid>
      <description>GitHub rate limit exceeded To avoid exceeding GitHubs rate limit we suggest to generate a personal access token in your GitHub settings and set it as an environment variable:&#xA;Mac/Linux Windows export GITHUB_API_TOKEN=&amp;lt;your_api_token&amp;gt;&#xA;set GITHUB_API_TOKEN=&amp;lt;your_api_token&amp;gt; or Set environment variable via system settings GITHUB_API_TOKEN=&amp;lt;your_api_token&amp;gt;&#xA;After you have set the ENV consider to restart VS Code.&#xA;It is important that VS Code has access to this ENV during the postCreateCommand inside the devcontainer.</description>
    </item>
    <item>
      <title>Logging guidelines</title>
      <link>/velocitas/docs/concepts/logging/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0100</pubDate>
      <guid>/velocitas/docs/concepts/logging/</guid>
      <description>Rationale: Logging application behavior is absolutely necessary for monitoring applications and also track down possible issues.&#xA;Levels In Velocitas, we establish the following log levels, ordered from lowest to highest priority:&#xA;Level Purpose Examples Debug Display of information to aid debugging of live systems like resolved values, executed lines of code, taken branches etc&amp;hellip; &amp;quot;variable=5&amp;quot;, &amp;quot;executing branch debug==false&amp;quot; Info Display of regular, user friendly messages to indicate the current state of the application.</description>
    </item>
    <item>
      <title>Kanto Runtime</title>
      <link>/velocitas/docs/tutorials/vehicle_app_runtime/kanto_runtime/</link>
      <pubDate>Mon, 09 May 2022 13:43:25 +0530</pubDate>
      <guid>/velocitas/docs/tutorials/vehicle_app_runtime/kanto_runtime/</guid>
      <description>Besides starting the vehicle runtime components locally , another way is to deploy them as containers using Kanto . To start the runtime, we provide VS Code Tasks, a feature of Visual Studio Code. Additional information on tasks can be found here .&#xA;Quick Start: Each step has a task that is defined in /.vscode/tasks.json:&#xA;Core tasks (dependent on each other in the given order):&#xA;Kanto - Runtime Up: Starts up the Kanto runtime and deploys the runtime components.</description>
    </item>
  </channel>
</rss>
